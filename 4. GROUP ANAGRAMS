// Python3 Code
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        ans = defaultdict(list)
        for s in strs:
            count = [0]*26
            for c in s:
                count[ord(c) - ord("a")] += 1
            ans[tuple(count)].append(s)
        return ans.values()
        
      
      
// C++ Code      
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        map<string, vector<string>> mpp;
        int k = 0;
        for(auto s : strs) {
            string x = s;
            sort(x.begin(), x.end());
            mpp[x].push_back(s);
        }
        vector<vector<string>> ans;
        for(auto it : mpp)
            ans.push_back(it.second);
        return ans;
    }
};



// Count Sort

class Solution {
private:
    void count_sort(string& s) {
        int n = s.size();
        vector<int> count(26, 0);
        string ans;
        for(int i = 0; i < n; i++)
            count[s[i] - 'a']++;
        for(int i = 0; i < 26; i++)
            ans.append(count[i], i+'a');
        s = ans;
    }
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        map<string, vector<string>> mpp;
        int k = 0;
        for(auto s : strs) {
            string x = s;
            count_sort(x);
            mpp[x].push_back(s);
        }
        vector<vector<string>> ans;
        for(auto it : mpp)
            ans.push_back(it.second);
        return ans;
    }
};
