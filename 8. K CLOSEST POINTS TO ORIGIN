// C++ Solution

class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        for(auto it : points) {
            int x = it[0], y = it[1];
            int dist = (x*x) + (y*y);
            pq.push({dist, {x, y}});
        }
        vector<vector<int>> ans;
        while(k) {
            int dist = pq.top().first;
            int x = pq.top().second.first;
            int y = pq.top().second.second;
            pq.pop();
            ans.push_back({x, y});
            k--;
        }
        return ans;
    }
};




// PYTHON3 Solution

class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        minHeap = []
        for x, y in points:
            dist = (x**2) + (y**2)
            minHeap.append([dist, x, y])
        heapq.heapify(minHeap)
        ans = []
        while k > 0:
            dist, x, y = heapq.heappop(minHeap)
            ans.append([x, y])
            k -= 1
        return ans
