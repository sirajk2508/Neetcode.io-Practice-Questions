class Solution:
    def shortestAlternatingPaths(self, n: int, redEdges: List[List[int]], blueEdges: List[List[int]]) -> List[int]:
        red = collections.defaultdict(list)
        blue = collections.defaultdict(list)

        for src, dst in redEdges:
            red[src].append(dst)
        for src, dst in blueEdges:
            blue[src].append(dst)
        ans = [-1 for i in range(n)]
        vis = set()
        q = deque()
        q.append([0, 0, None]) # node, length, prev_node_color
        vis.add((0, None))
        while q:
            node, length, edgeColor = q.popleft()
            if ans[node] == -1:
                ans[node] = length
            if edgeColor != "RED":
                for i in red[node]:
                    if (i, "RED") not in vis:
                        vis.add((i, "RED"))
                        q.append([i, length+1, "RED"])
            if edgeColor != "BLUE":
                for i in blue[node]:
                    if (i, "BLUE") not in vis:
                        vis.add((i, "BLUE"))
                        q.append([i, length+1, "BLUE"])
        return ans
