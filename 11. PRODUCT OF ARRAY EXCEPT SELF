// C++ Extra Space

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> prefix(n, 1), postfix(n, 1), ans(n, 1);
        for(int i = 1; i < n; i++)
            prefix[i] = prefix[i-1] * nums[i-1];
        for(int i = n-2; i >= 0; i--)
            postfix[i] = postfix[i+1] * nums[i+1];
        for(int i = 0; i < n; i++)
            ans[i] = prefix[i] * postfix[i];
        return ans;
    }
};

// C++  O(1) Space

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n, 1);
        int prefix = 1;
        for(int i = 0; i < n; i++) {
            ans[i] = prefix;
            prefix *= nums[i];
        }
        int postfix = 1;
        for(int i = n-1; i >= 0; i--) {
            ans[i] *= postfix;
            postfix *= nums[i];
        }
        return ans;
    }
};



// PYTHON3 CODES

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        res = [1] * n
        prefix = 1
        for i in range(n):
            res[i] = prefix
            prefix *= nums[i]
        postfix = 1
        for i in range(n-1, -1, -1):
            res[i] *= postfix
            postfix *= nums[i]
        return res
