// HASHMAP

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_map<int, int> mpp;
        for(auto i : nums)
            mpp[i]++;
        for(auto it : mpp) {
            if(it.second > 1)
                return true;
        }
        return false;
    }
};


// HASHSET

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        set<int> st(nums.begin(), nums.end());
        int n = nums.size();
        return n > st.size();
    }
};



// SORTING 

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for(int i = 0; i < n-1; i++)
            if(nums[i] == nums[i+1])
                return true;
        return false;
    }
};
