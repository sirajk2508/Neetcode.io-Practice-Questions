// TC : O(N^2)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for(int i = 0; i < nums.size(); i++) {
            for(int j = i+1; j < nums.size(); j++)
                if(nums[i] + nums[j] == target)
                    return {i, j};
        }
        return {};
    }
};



// Sorting

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<pair<int, int>> ans(n);
        for(int i = 0; i < n; i++)
            ans[i] = make_pair(nums[i], i);
        sort(ans.begin(), ans.end());
        int i = 0, j = n-1;
        while(i < j) {
            int sum = ans[i].first + ans[j].first;
            if(sum == target)
                return {ans[i].second, ans[j].second};
            if(sum > target)
                j--;
            else i++;
        }
        return {};
    }
};




// HASHMAP : TC : O(N)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mpp;
        for(int i = 0; i < nums.size(); i++) {
            if(mpp.find(target - nums[i]) != mpp.end())
                return {mpp[target- nums[i]], i};
            mpp[nums[i]] = i;
        }
        return {};
    }
};
