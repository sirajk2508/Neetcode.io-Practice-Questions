class Solution {
private:
    long long ans = 0;
    int dfs(int node, int parent, unordered_map<int, vector<int>>& adj, int seats) {
        int passengers = 0;
        for(auto& child : adj[node]) {
            if(child != parent) {
                int p = dfs(child, node, adj, seats);
                passengers += p;
                ans += (int)ceil(p * 1.0 / seats);
            }
        }
        return passengers + 1;
    }
public:
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
        unordered_map<int, vector<int>> adj;
        for(auto& it : roads) {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        dfs(0, -1, adj, seats);
        return ans;
    }
};
